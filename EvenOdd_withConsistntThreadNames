// Brought from Stack Ovflowhttps://stackoverflow.com/questions/16689449/printing-even-and-odd-using-two-threads-in-java
public class TestClass {
// class print even odd tester
	public static void main(String... args) {
		Printer print = new Printer();
		Thread t1 = new Thread(new TaskEvenOdd(print, 10, false));
		Thread t2 = new Thread(new TaskEvenOdd(print, 10, false));
		Thread t3 = new Thread(new TaskEvenOdd(print, 10, false));
		Thread t4 = new Thread(new TaskEvenOdd(print, 10, false));
		Thread t5 = new Thread(new TaskEvenOdd(print, 10, true));
		Thread t6 = new Thread(new TaskEvenOdd(print, 10, true));
		Thread t7 = new Thread(new TaskEvenOdd(print, 10, true));
		Thread t8 = new Thread(new TaskEvenOdd(print, 10, true));
		t1.start();
		t5.start();
		t2.start();
		t6.start();
		t3.start();
		t7.start();
		t4.start();
		t8.start();
	}

}

class TaskEvenOdd implements Runnable {

	private int max;
	private Printer print;
	private boolean isEvenNumber;
	private boolean isFirstEvenPrinted;
	private boolean isFirstOddPrinted;
	String threadNumberForEven;
	String threadNumberForOdd;

	TaskEvenOdd(Printer print, int max, boolean isEvenNumber) {
		this.print = print;
		this.max = max;
		this.isEvenNumber = isEvenNumber;
	}

	@Override
	public synchronized void  run() {

		// System.out.println("Run method");
		int number = isEvenNumber == true ? 2 : 1;
		while (number <= max) {

			if (isEvenNumber && !isFirstEvenPrinted) {
				// System.out.println("Even :"+ Thread.currentThread().getName());
				print.printEven(number);
				isFirstEvenPrinted = true;
				threadNumberForEven = Thread.currentThread().getName();

				// number+=2;
			} else if (!isEvenNumber && !isFirstOddPrinted) {
				// System.out.println("Odd :"+ Thread.currentThread().getName());
				print.printOdd(number);
				isFirstOddPrinted = true;
				threadNumberForOdd = Thread.currentThread().getName();
				// number+=2;
			}

			if (isEvenNumber && isFirstEvenPrinted && Thread.currentThread().getName().equals(threadNumberForEven)) {
				print.printEven(number);
			} else if (!isEvenNumber && isFirstOddPrinted
					&& Thread.currentThread().getName().equals(threadNumberForOdd)) {

				print.printOdd(number);

			}

			number += 2;

		}

	}
}

class Printer {

    boolean isOdd = false;

    synchronized void printEven(int number) {

        while (isOdd == false) {
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println("Even:" + number);
        isOdd = false;
        notifyAll();
    }

    synchronized void printOdd(int number) {
        while (isOdd == true) {
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println("Odd:" + number);
        isOdd = true;
        notifyAll();
    }

}

